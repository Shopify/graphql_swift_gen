// Generated from <%= script_name %>
import Foundation
<% if import_graphql_support %>
  import GraphQLSupport
<% end %>

<% case type.kind; when 'OBJECT', 'INTERFACE', 'UNION' %>
  <% fields = type.fields(include_deprecated: true) || [] %>
<% end %>

<% if type.interface? || type.union? %>
  public protocol <%= type.name %> {
    var typeName: String { get }
    <% fields.each do |field| %>
      <%= swift_attributes(field) %>
      var <%= escape_reserved_word(field.camelize_name) %>: <%= swift_output_type(field.type) %> { get }
    <% end %>
    func childResponseObjectMap() -> [GraphQL.AbstractResponse]

    func responseObject() -> GraphQL.AbstractResponse
  }
<% end %>

extension <%= schema_name %> {
  <% case type.kind; when 'OBJECT', 'INTERFACE', 'UNION' %>
    open class <%= type.name %>Query: GraphQL.AbstractQuery, GraphQLQuery {
      public typealias Response = <%= type.name %>

      <% if type.name == schema.mutation_root_name %>
        open override var description: String {
          return "mutation" + super.description
        }
      <% end %>
      <% fields.each do |field| %>
        <%= swift_attributes(field) %>
        @discardableResult
        open func <%= escape_reserved_word(field.camelize_name) %>(<%= swift_arg_defs(field) %>) -> <%= type.name %>Query {
          <% unless field.args.empty? %>
            var args: [String] = []
            <% field.required_args.each do |arg| %>
              args.append("<%= arg.name %>:<%= generate_build_input_code(arg.name, arg.type.unwrap_non_null) %>")
            <% end %>
            <% field.optional_args.each do |arg| %>
              if let <%= escape_reserved_word(arg.name) %> = <%= escape_reserved_word(arg.name) %> {
                args.append("<%= arg.name %>:<%= generate_build_input_code(arg.name, arg.type) %>")
              }
            <% end %>
            <% if field.optional_args.empty? %>
              let argsString = "(\(args.joined(separator: ",")))"
            <% else %>
              let argsString: String? = args.isEmpty ? nil : "(\(args.joined(separator: ",")))"
            <% end %>
          <% end %>

          <% if field.subfields? %>
            let subquery = <%= field.type.unwrap.name %>Query()
            subfields(subquery)
          <% end %>

          addField(field: "<%= field.name %>", aliasSuffix: aliasSuffix<% unless field.args.empty? %>, args: argsString<% end %><% if field.subfields? %>, subfields: subquery<% end %>)
          return self
        }
      <% end %>
      <% unless type.object? %>
        override init() {
          super.init()
          addField(field: "__typename")
        }
        <% type.possible_types.each do |possible_type| %>
          @discardableResult
          open func on<%= possible_type.name %>(subfields: (<%= possible_type.name %>Query) -> Void) -> <%= type.name %>Query {
            let subquery = <%= possible_type.name %>Query()
            subfields(subquery)
            addInlineFragment(on: "<%= possible_type.name %>", subfields: subquery)
            return self
          }
        <% end %>
      <% end %>
    }

    <% class_name = type.object? ? type.name : "Unknown#{type.name}" %>
    open class <%= class_name %>: GraphQL.AbstractResponse, GraphQLObject<%= swift_protocols(type) %> {
      public typealias Query = <%= type.name %>Query

      open override func deserializeValue(fieldName: String, value: Any) throws -> Any? {
        let fieldValue = value
        switch fieldName {
          <% fields.each do |field| %>
            case "<%= field.name %>":
              <%= deserialize_value_code(field.name, 'value', field.type) %>
          <% end %>
          default:
            throw SchemaViolationError(type: type(of: self), field: fieldName, value: fieldValue)
        }
      }

      <% if type.object? %>
        open var typeName: String { return "<%= type.name %>" }
      <% else %>
        open var typeName: String { return field(field: "__typename") as! String }

        open static func create(fields: [String: Any]) throws -> <%= type.name %> {
          guard let typeName = fields["__typename"] as? String else {
            throw SchemaViolationError(type: <%= class_name %>.self, field: "__typename", value: fields["__typename"] ?? NSNull())
          }
          switch typeName {
            <% type.possible_types.each do |possible_type| %>
              case "<%= possible_type.name %>":
                return try <%= possible_type.name %>.init(fields: fields)
            <% end %>
            default:
              return try <%= class_name %>.init(fields: fields)
          }
        }
      <% end %>

      <% fields.each do |field| %>
        <%= swift_attributes(field) %>
        open var <%= escape_reserved_word(field.camelize_name) %>: <%= swift_output_type(field.type) %> {
          return internalGet<%= field.classify_name %>()
        }

        <% unless field.args.empty? %>
          <%= swift_attributes(field) %>
          open func aliased<%= field.classify_name %>(aliasSuffix: String) -> <%= swift_output_type(field.type) %> {
            return internalGet<%= field.classify_name %>(aliasSuffix: aliasSuffix)
          }
        <% end %>

        func internalGet<%= field.classify_name %>(aliasSuffix: String? = nil) -> <%= swift_output_type(field.type) %> {
          return field(field: "<%= field.name %>", aliasSuffix: aliasSuffix) as! <%= swift_output_type(field.type) %>
        }
      <% end %>

      override open func childObjectType(key: String) -> GraphQL.ChildObjectType {
        switch(key) {
        <% fields.each do |field| %>
          case "<%= field.name %>":
          <% case field.type.unwrap_non_null.kind
          when 'OBJECT', 'INTERFACE' %>
            return .object
          <% when 'LIST' %>
            <% case field.type.unwrap.kind
            when 'OBJECT', 'INTERFACE' %>
            return .objectList
            <% else %>
            return .scalarList
            <% end %>
          <% else %>
            return .scalar
          <% end %>
        <% end %>
          default:
            return .scalar
        }
      }

      override open func fetchChildObject(key: String) -> GraphQL.AbstractResponse? {
        switch(key) {
        <% fields.each do |field| %>
          <% if field.type.unwrap_non_null.kind == 'OBJECT' %>
          case "<%= field.name %>":
            return internalGet<%= field.classify_name %>()
          <% elsif field.type.unwrap_non_null.kind == 'INTERFACE' %>
          case "<%= field.name %>":
            return internalGet<%= field.classify_name %>()<%= field.type.non_null? ? '' : '?' %>.responseObject()
          <% end %>
        <% end %>
          default:
            break
        }
        return nil
      }

      override open func fetchChildObjectList(key: String) -> [GraphQL.AbstractResponse] {
        switch(key) {
          <% fields.each do |field| %>
            <% if field.type.unwrap_non_null.kind == 'LIST' && field.type.unwrap.kind == 'OBJECT' %>
              case "<%= field.name %>":
                return internalGet<%= field.classify_name %>()<% if !field.type.non_null? %> ?? []<% end %>
              <% end %>
          <% end %>
              default:
                return []
        }
      }

      open func childResponseObjectMap() -> [GraphQL.AbstractResponse]  {
        <% if fields.any? { |field| ['OBJECT', 'INTERFACE'].include?(field.type.unwrap_non_null.kind) } %>
          var response: [GraphQL.AbstractResponse] = []
          objectMap.keys.forEach({
          key in
            switch(key) {
            <% fields.each do |field| %>
              <% if %w(OBJECT INTERFACE UNION).include?(field.type.unwrap.kind) %>
                case "<%= field.name %>":
                  <%= generate_append_objects_code("internalGet#{field.classify_name}()", field.type) %>
              <% end %>
            <% end %>
            default:
              break
            }
          })
          return response
        <% else %>
          return []
        <% end %>
      }

      open func responseObject() -> GraphQL.AbstractResponse {
        return self as GraphQL.AbstractResponse
      }
    }
  <% when 'INPUT_OBJECT' %>
    open class <%= type.name %> {
      <% type.required_input_fields.each do |field| %>
       open var <%= escape_reserved_word(field.camelize_name) %>: <%= swift_input_type(field.type) %>
      <% end %>
      <% type.optional_input_fields.each do |field| %>
        open var <%= escape_reserved_word(field.camelize_name) %>: <%= swift_input_type(field.type) %> {
          didSet {
            <%= escape_reserved_word(field.camelize_name) %>Seen = true
          }
        }
        private var <%= escape_reserved_word(field.camelize_name) %>Seen: Bool = false
      <% end %>

      public init(
        <% input_fields = type.required_input_fields + type.optional_input_fields # manually ordered with required fields first %>
        <% input_fields.each do |field| %>
          <% seperator = field == input_fields.last ? "" : "," %>
          <% if field.type.non_null? %>
            <%= escape_reserved_word(field.camelize_name) %>: <%= swift_input_type(field.type) %><%= seperator %>
          <% else %>
            <%= escape_reserved_word(field.camelize_name) %>: <%= swift_input_type(field.type) %>? = nil<%= seperator %>
          <% end %>
        <% end %>
      ) {
        <% type.required_input_fields.each do |field| %>
          self.<%= escape_reserved_word(field.camelize_name) %> = <%= escape_reserved_word(field.camelize_name) %>
        <% end %>
        <% type.optional_input_fields.each do |field| %>
          <% field_name = escape_reserved_word(field.camelize_name) %>
          if let <%= field_name %> = <%= field_name %> {
            self.<%= field_name %>Seen = true
            self.<%= field_name %> = <%= field_name %>
          }
        <% end %>
      }

      func serialize() -> String {
        var fields: [String] = []
        <% type.required_input_fields.each do |field| %>
          fields.append("<%= field.name %>:<%= generate_build_input_code(field.camelize_name, field.type.unwrap_non_null) %>")
        <% end %>
        <% type.optional_input_fields.each do |field| %>
          if <%= escape_reserved_word(field.camelize_name) %>Seen {
            if let <%= escape_reserved_word(field.camelize_name) %> = <%= escape_reserved_word(field.camelize_name) %> {
              fields.append("<%= field.name %>:<%= generate_build_input_code(field.camelize_name, field.type.unwrap_non_null) %>")
            } else {
              fields.append("<%= field.name %>:null")
            }
          }
        <% end %>
        return "{\(fields.joined(separator: ","))}"
      }
    }
  <% when 'ENUM' %>
    public enum <%= type.name %>: String {
      <% type.enum_values(include_deprecated: true).each do |value| %>
        <%= swift_attributes(value) %>
        case <%= escape_reserved_word(value.camelize_name) %> = "<%= value.name %>"
      <% end %>
      case unknownValue = ""
    }
  <% else %>
    <% raise NotImplementedError, "unhandled #{type.kind} type #{type.name}" %>
  <% end %>
}
